#!/usr/bin/python
#
# Copyright 2011, Pall Sigurdsson <palli@opensource.is>
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# No real need to change anything below here
version="1.0"

import sys
import okconfig


# Parse some Arguments
from optparse import OptionParser,OptionGroup

parser = OptionParser()


parser.add_option("--host", dest="host",
	help="name of host to add")
parser.add_option("--template", dest="template",
	help="Name of template to use")
parser.add_option("--host_template", dest="host_template", default="host",
	help="Name of host template to use")
parser.add_option("--group", dest="group",
	help="Name of group")
parser.add_option("--force", dest="force", action="store_true",
	default=False,help="Overwrite files if needed")
parser.add_option("--use", dest="use", default=None,
	help="Inherit settings from specified template")
parser.add_option("--address", dest="address", default=None,
	help="IP Address of host")
parser.add_option("--alias", dest="alias", default=None,
	help="Alias to use")

# contact specific
parser.add_option("--contact_name", dest="contact_name", default=None,
	help="contact_name")
parser.add_option("--email", dest="email", default=None,
	help="email for this contact")

# Service specific
parser.add_option("--service_description", dest="service_description", default=None,
	help="service specificic: description of this service")
parser.add_option("--check_command", dest="check_command", default=None,
	help="service specificic: check command to use with this service.")

(opts,args) = parser.parse_args()



# Here we have some action
try:
	if opts.mode == "addhost":
		if not opts.host: parser.error("--host is required")
		try:
			templates = opts.template.split(',')
		except AttributeError:
			templates = ()
		f = okconfig.addhost(host_name=opts.host,address=opts.address,group_name=opts.group,use=opts.use,force=opts.force,templates=templates,host_template=opts.host_template)
		for i in f: print "Saved", i
	elif opts.mode == "addgroup":
		if not opts.group: parser.error("--group is required")
		f = okconfig.addgroup(group_name=opts.group,alias=opts.alias,force=opts.force)
		for i in f: print "Saved", i
	elif opts.mode == "addtemplate":
		if not opts.host: parser.error("--host is required")
		if not opts.template: parser.error("--template is required")
		f = okconfig.addtemplate(host_name=opts.host,template_name=opts.template,force=opts.force)
		for i in f: print "Saved", i
		message = "Template successfully added"
	elif opts.mode == "addcontact":
		if not opts.contact_name: parser.error("--contact_name is required with --addcontact")
		f = okconfig.addcontact(contact_name=opts.contact_name, alias=opts.alias, force=opts.force, group_name=opts.group, email=opts.email)
		for i in f: print "Saved", i
		message = "Contact successfully added"
	elif opts.mode == "verify":
		result = okconfig.verify()
		print "Okconfig verification"
		print "---------------------"
		for k,v in result.items():
			if v is True: v = "success"
			else: v = "fail"
			print "* %-70s...%s" % (k,v)
	elif opts.mode == 'upgrade':
		import okconfig.migration_tool
		result = okconfig.migration_tool.upgrade_okconfig()
except okconfig.OKConfigError, e:
	print "Error: %s" % e
	sys.exit(1)
